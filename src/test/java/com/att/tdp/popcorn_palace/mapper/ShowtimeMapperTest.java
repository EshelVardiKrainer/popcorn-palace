package com.att.tdp.popcorn_palace.mapper;

import com.att.tdp.popcorn_palace.dto.ShowtimeDTO;
import com.att.tdp.popcorn_palace.model.Movie;
import com.att.tdp.popcorn_palace.model.Showtime;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import java.time.Instant;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

class ShowtimeMapperTest {

    private final ShowtimeMapper showtimeMapper = Mappers.getMapper(ShowtimeMapper.class);

    @Test
    void toDTO() {
        Movie movie = new Movie();
        movie.setId(1L);
        movie.setTitle("Inception");
        movie.setDirector("Christopher Nolan");
        movie.setGenre("Sci-Fi");
        movie.setReleaseDate(new Date()); // Assuming Movie has these fields based on MovieMapperTest
        movie.setDurationMin(148);
        movie.setRating(8.8);
        movie.setPlotSummary("Plot summary");
        movie.setLanguage("English");
        movie.setCountry("USA");
        movie.setPosterImageUrl("url");
        movie.setTrailerUrl("url");

        Instant startTime = Instant.now();
        Instant endTime = startTime.plusSeconds(7200); // 2 hours later

        Showtime showtime = new Showtime();
        showtime.setId(10L);
        showtime.setMovie(movie);
        showtime.setTheater("Theater A");
        showtime.setStart_time(startTime);
        showtime.setEnd_time(endTime);
        showtime.setPrice(12.50);

        ShowtimeDTO showtimeDTO = showtimeMapper.toDTO(showtime);

        assertNotNull(showtimeDTO);
        assertEquals(showtime.getId(), showtimeDTO.getId());
        assertNotNull(showtimeDTO.getMovieId());
        assertEquals(movie.getId(), showtimeDTO.getMovieId());
        assertEquals(showtime.getTheater(), showtimeDTO.getTheater());
        assertEquals(showtime.getStart_time(), showtimeDTO.getStartTime());
        assertEquals(showtime.getEnd_time(), showtimeDTO.getEndTime());
        assertEquals(showtime.getPrice(), showtimeDTO.getPrice());
    }

    @Test
    void fromDTO() {
        Long movieId = 1L;
        Instant startTime = Instant.now();
        Instant endTime = startTime.plusSeconds(7200);

        ShowtimeDTO showtimeDTO = new ShowtimeDTO();
        showtimeDTO.setId(10L); // Mapper might not map ID from DTO to entity, depends on config
        showtimeDTO.setMovieId(movieId);
        showtimeDTO.setTheater("Theater B");
        showtimeDTO.setStartTime(startTime);
        showtimeDTO.setEndTime(endTime);
        showtimeDTO.setPrice(15.75);

        Showtime showtime = showtimeMapper.fromDTO(showtimeDTO);

        assertNotNull(showtime);
        // ID is typically generated by DB, so mapper might not set it from DTO.
        // If ID is set by mapper, uncomment next line:
        // assertEquals(showtimeDTO.getId(), showtime.getId());
        
        // The Movie object itself is not mapped by fromDTO, only its ID is available in DTO.
        // The service layer is responsible for fetching the Movie entity using movieId.
        assertNull(showtime.getMovie(), "Movie object should not be mapped by fromDTO directly");
        
        assertEquals(showtimeDTO.getTheater(), showtime.getTheater());
        assertEquals(showtimeDTO.getStartTime(), showtime.getStart_time());
        assertEquals(showtimeDTO.getEndTime(), showtime.getEnd_time());
        assertEquals(showtimeDTO.getPrice(), showtime.getPrice());
    }

    @Test
    void toDTO_whenShowtimeIsNull_shouldReturnNull() {
        ShowtimeDTO showtimeDTO = showtimeMapper.toDTO(null);
        assertNull(showtimeDTO);
    }

    @Test
    void fromDTO_whenShowtimeDTOIsNull_shouldReturnNull() {
        Showtime showtime = showtimeMapper.fromDTO(null);
        assertNull(showtime);
    }
}
